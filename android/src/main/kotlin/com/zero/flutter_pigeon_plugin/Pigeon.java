// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zero.flutter_pigeon_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SearchRequest {
    private @NonNull String query;
    public @NonNull String getQuery() { return query; }
    public void setQuery(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"query\" is null.");
      }
      this.query = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SearchRequest() {}
    public static final class Builder {
      private @Nullable String query;
      public @NonNull Builder setQuery(@NonNull String setterArg) {
        this.query = setterArg;
        return this;
      }
      public @NonNull SearchRequest build() {
        SearchRequest pigeonReturn = new SearchRequest();
        pigeonReturn.setQuery(query);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("query", query);
      return toMapResult;
    }
    static @NonNull SearchRequest fromMap(@NonNull Map<String, Object> map) {
      SearchRequest pigeonResult = new SearchRequest();
      Object query = map.get("query");
      pigeonResult.setQuery((String)query);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SearchReply {
    private @NonNull String result;
    public @NonNull String getResult() { return result; }
    public void setResult(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"result\" is null.");
      }
      this.result = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SearchReply() {}
    public static final class Builder {
      private @Nullable String result;
      public @NonNull Builder setResult(@NonNull String setterArg) {
        this.result = setterArg;
        return this;
      }
      public @NonNull SearchReply build() {
        SearchReply pigeonReturn = new SearchReply();
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("result", result);
      return toMapResult;
    }
    static @NonNull SearchReply fromMap(@NonNull Map<String, Object> map) {
      SearchReply pigeonResult = new SearchReply();
      Object result = map.get("result");
      pigeonResult.setResult((String)result);
      return pigeonResult;
    }
  }
  private static class FlutterCallNativeApiCodec extends StandardMessageCodec {
    public static final FlutterCallNativeApiCodec INSTANCE = new FlutterCallNativeApiCodec();
    private FlutterCallNativeApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SearchReply.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return SearchRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SearchReply) {
        stream.write(128);
        writeValue(stream, ((SearchReply) value).toMap());
      } else 
      if (value instanceof SearchRequest) {
        stream.write(129);
        writeValue(stream, ((SearchRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterCallNativeApi {
    @NonNull SearchReply search(@NonNull SearchRequest request);

    /** The codec used by FlutterCallNativeApi. */
    static MessageCodec<Object> getCodec() {
      return FlutterCallNativeApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FlutterCallNativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FlutterCallNativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallNativeApi.search", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SearchRequest requestArg = (SearchRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              SearchReply output = api.search(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class NativeCallFlutterApiCodec extends StandardMessageCodec {
    public static final NativeCallFlutterApiCodec INSTANCE = new NativeCallFlutterApiCodec();
    private NativeCallFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SearchReply.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return SearchRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SearchReply) {
        stream.write(128);
        writeValue(stream, ((SearchReply) value).toMap());
      } else 
      if (value instanceof SearchRequest) {
        stream.write(129);
        writeValue(stream, ((SearchRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class NativeCallFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public NativeCallFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return NativeCallFlutterApiCodec.INSTANCE;
    }

    public void query(@NonNull SearchRequest requestArg, Reply<SearchReply> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.query", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SearchReply output = (SearchReply)channelReply;
        callback.reply(output);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
