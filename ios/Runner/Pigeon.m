// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTSearchRequest ()
+ (FLTSearchRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTSearchReply ()
+ (FLTSearchReply *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTSearchRequest
+ (instancetype)makeWithQuery:(NSString *)query {
  FLTSearchRequest* pigeonResult = [[FLTSearchRequest alloc] init];
  pigeonResult.query = query;
  return pigeonResult;
}
+ (FLTSearchRequest *)fromMap:(NSDictionary *)dict {
  FLTSearchRequest *pigeonResult = [[FLTSearchRequest alloc] init];
  pigeonResult.query = GetNullableObject(dict, @"query");
  NSAssert(pigeonResult.query != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.query ? self.query : [NSNull null]), @"query", nil];
}
@end

@implementation FLTSearchReply
+ (instancetype)makeWithResult:(NSString *)result {
  FLTSearchReply* pigeonResult = [[FLTSearchReply alloc] init];
  pigeonResult.result = result;
  return pigeonResult;
}
+ (FLTSearchReply *)fromMap:(NSDictionary *)dict {
  FLTSearchReply *pigeonResult = [[FLTSearchReply alloc] init];
  pigeonResult.result = GetNullableObject(dict, @"result");
  NSAssert(pigeonResult.result != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.result ? self.result : [NSNull null]), @"result", nil];
}
@end

@interface FLTFlutterCallNativeApiCodecReader : FlutterStandardReader
@end
@implementation FLTFlutterCallNativeApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTSearchReply fromMap:[self readValue]];
    
    case 129:     
      return [FLTSearchRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTFlutterCallNativeApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTFlutterCallNativeApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTFlutterCallNativeApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTFlutterCallNativeApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTFlutterCallNativeApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTFlutterCallNativeApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTFlutterCallNativeApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTFlutterCallNativeApiCodecReaderWriter *readerWriter = [[FLTFlutterCallNativeApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTFlutterCallNativeApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTFlutterCallNativeApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FlutterCallNativeApi.search"
        binaryMessenger:binaryMessenger
        codec:FLTFlutterCallNativeApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchRequest:error:)], @"FLTFlutterCallNativeApi api (%@) doesn't respond to @selector(searchRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTSearchRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTSearchReply *output = [api searchRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTNativeCallFlutterApiCodecReader : FlutterStandardReader
@end
@implementation FLTNativeCallFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTSearchReply fromMap:[self readValue]];
    
    case 129:     
      return [FLTSearchRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTNativeCallFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTNativeCallFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTNativeCallFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTNativeCallFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTNativeCallFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTNativeCallFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTNativeCallFlutterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTNativeCallFlutterApiCodecReaderWriter *readerWriter = [[FLTNativeCallFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTNativeCallFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTNativeCallFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)queryRequest:(FLTSearchRequest *)arg_request completion:(void(^)(FLTSearchReply *_Nullable, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NativeCallFlutterApi.query"
      binaryMessenger:self.binaryMessenger
      codec:FLTNativeCallFlutterApiGetCodec()];
  [channel sendMessage:@[(arg_request == nil) ? [NSNull null] : arg_request] reply:^(id reply) {
    FLTSearchReply *output = reply;
    completion(output, nil);
  }];
}
@end
